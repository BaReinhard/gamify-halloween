{"version":3,"sources":["CreateQR.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["CreateQR","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleSubmit","axios","post","username","state","then","response","modal","usernameResponse","data","status","showQR","catch","err","onHide","react_default","a","createElement","className","qrcode_react_lib_default","baseURL","generatedValue","style","margin","width","height","background","type","name","onChange","bind","onClick","Modal","show","zIndex","autoFocus","keyboard","Header","closeButton","Title","Body","Component","HomePage","App","displayNav","BrowserRouter","ref","textAlign","all","fontFamily","position","fontSize","backgroundColor","border","aria-hidden","Nav","lib","to","activeClassName","NavItem","Switch","Route","exact","path","component","Redirect","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b8c0ee48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Modal } from \"react-bootstrap\";\nimport QR from \"qrcode.react\";\nimport axios from \"axios\";\nconst baseURL =\n  \"https://gamify-halloween-dot-uplifted-elixir-203119.appspot.com/api/addcount\";\nclass CreateQR extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      showQR: false,\n      modal: false\n    };\n  }\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n  handleSubmit = event => {\n    axios\n      .post(\"/api/addusername\", { username: this.state.value })\n      .then(response => {\n        this.setState({\n          modal: true,\n          usernameResponse: response.data.status,\n          showQR: true\n        });\n      })\n      .catch(err => {\n        this.setState({\n          modal: true,\n          usernameResponse:\n            \"An Error has Occurred Saving your Username. Please try again.\"\n        });\n      });\n  };\n  onHide = () => {\n    this.setState({\n      modal: false\n    });\n  };\n  render() {\n    return (\n      <div className=\"Component\">\n        <div>\n          {this.state.showQR ? (\n            <QR value={baseURL + \"?uid=\" + this.state.generatedValue} />\n          ) : (\n            <div\n              style={{\n                margin: \"0 auto\",\n                width: \"250px\",\n                height: \"250px\",\n                background:\n                  \"url(https://loading.io/spinners/coolors/lg.palette-rotating-ring-loader.gif)\"\n              }}\n            />\n          )}\n        </div>\n        <h3>Enter User Name</h3>\n        <p>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={this.state.value}\n            onChange={this.handleChange.bind(this)}\n          />\n        </p>\n        <p>\n          <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n            Submit\n          </button>\n        </p>\n        <Modal\n          show={this.state.modal}\n          onHide={this.onHide}\n          style={{ zIndex: 20000 }}\n          autoFocus\n          keyboard\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Boo!</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.state.usernameResponse}</Modal.Body>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CreateQR;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass HomePage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\"\n    };\n  }\n\n  render() {\n    return <div className=\"Component\">HOME PAGE</div>;\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport \"./fonts.css\";\nimport { LinkContainer, IndexLinkContainer } from \"react-router-bootstrap\";\nimport { Navbar, Nav, Image, NavItem } from \"react-bootstrap\";\nimport \"./App.css\";\nimport CreateQR from \"./CreateQR\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\nimport HomePage from \"./HomePage\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      displayNav: false\n    };\n  }\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n  displayNav = () => {\n    this.setState({ displayNav: !this.state.displayNav });\n  };\n  onHide = () => {\n    this.setState({\n      displayNav: false\n    });\n  };\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App All\">\n          <button\n            ref=\"nav\"\n            className=\"nav-button\"\n            onClick={this.displayNav}\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              all: \"none\",\n              fontFamily: \"Dancing Script, cursive\",\n              position: \"fixed\",\n              fontSize: \"2em\",\n              backgroundColor: \"rgba(0,0,0,0)\",\n              border: \"none\"\n            }}\n          >\n            <i className=\"fa fa-bars\" aria-hidden=\"true\" /> Gamify Halloween\n          </button>\n          <Modal\n            className=\"Sidebar left\"\n            show={this.state.displayNav}\n            onHide={this.onHide}\n            style={{ zIndex: 20000 }}\n            autoFocus\n            keyboard\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>Where do you want to go?</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Nav>\n                <IndexLinkContainer to=\"/\" activeClassName=\"active\">\n                  <NavItem onClick={this.onHide}>Home</NavItem>\n                </IndexLinkContainer>\n\n                <LinkContainer to=\"/createQR\" activeClassName=\"active\">\n                  <NavItem onClick={this.onHide}>Create QR</NavItem>\n                </LinkContainer>\n                <LinkContainer to=\"/about\" activeClassName=\"active\">\n                  <NavItem onClick={this.onHide}>About </NavItem>\n                </LinkContainer>\n              </Nav>\n            </Modal.Body>\n          </Modal>\n          <Switch>\n            <Route exact path={\"/\"} component={HomePage} />\n            <Route path=\"/createQR\" component={CreateQR} />\n            <Route path=\"/404\" component={HomePage} />\n            <Redirect path=\"*\" to=\"/404\" />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}